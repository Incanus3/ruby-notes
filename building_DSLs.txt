Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2013-09-08T15:21:14+02:00

====== building DSLs ======
Created Sunday 08 September 2013

* singleton pro konfiguraci
'''
module AccessControl
  extend self

  def configure(&block)
    instance_eval(&block)
  end

  def definitions
    @definitions ||= {}
  end

  # Role definition omitted, replace with a stub if you want to test
  # or refer to Practicing Ruby Issue #4
  def role(level, options={})
    definitions[level] = Role.new(level, options)
  end

  def roles_with_permission(permission)
    definitions.select { |k,v| v.allows?(permission) }.map { |k,_| k }
  end

  def [](level)
    definitions[level]
  end 
end
'''

* singleton pro definici extenzi
'''
Turbine::Application.extension(:start_command) do
  def start
    timer = Turbine::Timer.new
    if timer.running?
      prompt.say "Timer already started, please stop or rewind first"
    else
      timer.write_timestamp
      prompt.say "Timer started at #{Time.now}"
    end
  end
end
'''


'''
module Turbine
  class Application
    def self.extensions
      @extensions ||= {}
    end

    def self.extension(key, &block)
      extensions[key] = Module.new(&block) # def start ... se vyhodnoti v novem modulu
    end

    def initialize
      self.class.extensions.each do |_, extension|
        extend(extension) # kazda nova instance dostname funkcionalitu vsech definovanych extensionu
      end
    end

    def run(command)
      send(command)
    end
  end
end
'''
